<?php
// This file is part of Moodle - https://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.

use Infobip\Configuration;
use Infobip\Api\SmsApi;
use Infobip\Model\SmsDestination;
use Infobip\Model\SmsTextualMessage;
use Infobip\Model\SmsAdvancedTextualRequest;
use Twilio\Rest\Client;

require __DIR__ . "/vendor/autoload.php";

// Load environment variables
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__);
$dotenv->load();

$number = $_POST["number"];
$message = $_POST["message"];

if ($_POST["provider"] === "infobip") {
  // Infobip

    $baseurl = $_ENV["INFOBIP_API_BASE_URL"];
    $apikey = $_ENV["INFOBIP_API_KEY"];

    $configuration = new Configuration(host: $baseurl, apiKey: $apikey);

    $api = new SmsApi(config: $configuration);

    $destination = new SmsDestination(to: $number);

    $message = new SmsTextualMessage(
        destinations: [$destination],
        text: $message,
        from: "FLIP"
    );

    $request = new SmsAdvancedTextualRequest(messages: [$message]);

    $response = $api->sendSmsMessage($request);
} else if ($_POST["provider"] === "twilio") {
  // Twilio
  // Phone must be verified in Twilio.

    $accountid = $_ENV["TWILIO_ACCOUNT_ID"];
    $authtoken = $_ENV["TWILIO_AUTH_TOKEN"];

    $client = new Client($accountid, $authtoken);

    $twilionumber = "+16162716798";
  // $twilio_number = "+16164465848";

    $client->messages->create(
        $number,
        [
        "from" => $twilionumber,
        "body" => $message,
        ]
    );
} else if ($_POST["provider"] === "awssns") {
  // AWS SNS
  // Phone must be verified in AWS Pinpoint (or maybe SNS? not sure).
  // The following was auto-generated by Copilot. Let's see if it works.
    $awskey = $_ENV["AWS_KEY"];
    $awssecret = $_ENV["AWS_SECRET"];
    $awsregion = $_ENV["AWS_REGION"];
    $awstopic = $_ENV["AWS_TOPIC"];

    $sns = new Aws\Sns\SnsClient([
    "version" => "latest",
    "region" => $awsregion,
    "credentials" => [
      "key" => $awskey,
      "secret" => $awssecret,
    ],
    ]);

    $sns->publish([
    "Message" => $message,
    "PhoneNumber" => $number,
    ]);
} else {
    echo "Invalid provider.";
    exit;
}

echo "Message sent.";
